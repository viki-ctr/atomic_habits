import logging
from datetime import datetime

import requests
from celery import shared_task
from django.conf import settings

from habits.models import Habit
from telegram_bot.models import TelegramUser

logger = logging.getLogger(__name__)


@shared_task
def send_telegram_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ TelegramUser"""
    now = datetime.now().time()
    habits = Habit.objects.filter(time__hour=now.hour, time__minute=now.minute)

    for habit in habits:
        try:
            telegram_user = TelegramUser.objects.filter(user=habit.user).first()
            if telegram_user:
                message = format_reminder_message(habit)
                send_telegram_message.delay(
                    chat_id=telegram_user.chat_id,
                    message=message
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {habit.user}: {e}")


@shared_task
def send_telegram_message(chat_id: int, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        response = requests.post(url, json=payload)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


def format_reminder_message(habit: Habit) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    message = (
        f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ*\n"
        f"*–î–µ–π—Å—Ç–≤–∏–µ:* {habit.action}\n"
        f"*–ú–µ—Å—Ç–æ:* {habit.place}\n"
        f"*–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:* {habit.duration} —Å–µ–∫.\n"
    )

    if habit.reward:
        message += f"\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: *{habit.reward}* üéÅ"
    elif habit.related_habit:
        message += f"\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: *{habit.related_habit.action}* üòä"

    return message
